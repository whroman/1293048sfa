{"version":3,"sources":["util.coffee","util.js","apps/list.coffee","apps/list.js","collections/form.coffee","collections/form.js","collections/tasks.coffee","collections/tasks.js","controllers/tasksList.coffee","controllers/tasksList.js","directives/focusWhen.coffee","directives/focusWhen.js","models/input.coffee","models/input.js","models/task.coffee","models/task.js"],"names":["angular","module","factory","$rootScope","$window","Util","mediaQuery","$el","element","document","getElementById","get","this","css","typeIsArray","Array","isArray","value","toString","call","ModelInput","Form","all","prototype","set","name","initVal","ModelTask","CollectionTasks","order","keys","Name","Code","Description","Completion Date","by","reverse","fieldName","uid","task","i","len","tasksArray","length","push","contains","controller","$scope","$http","tasks","directive","$timeout","$parse","link","scope","attrs","model","focusWhen","$watch","focus","bind","$apply","assign","Input","initialValue","val","input","hasChanged","focused","reset","$event","console","log","onChange","stopPropagation","save","onFocus","onClick","onKeypress","keyCode","CollectionForm","Task","generateRandomIncreasingInts","NAME","CODE","DESC","ID","CATEGORY","CD","parseInt","isSelected","display","moment","format","form","num","start","mult","ints","j","ref","Math","floor","random","chart","labels","series","data"],"mappings":"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","file":"app.js","sourcesContent":["angular\n.module('Util', [\n# Dependencies\n])\n.factory 'Util', (\n# Dependency Injections\n    $rootScope\n    $window\n) ->\n    Util = {}\n    Util.mediaQuery = {}\n        # Cache jQuery selection, whose `z-index` value describes current media query state\n    Util.mediaQuery.$el = angular.element document.getElementById('media-query')\n        # Query current media query state\n    Util.mediaQuery.get = ->\n        this.$el.css 'z-index'\n\n    Util.typeIsArray = Array.isArray || ( value ) -> return {}.toString.call( value ) is '[object Array]'\n\n    Util",null,"angular.module 'App:List', [\n    'Controller:TasksList'\n    'Util'\n    'focusWhen'\n    'ngMaterial'\n    'chart.js'\n]",null,"angular\n.module('Collection:Form', [\n # Dependencies\n    'Model:Input'\n])\n.factory 'CollectionForm', (\n # Dependency Injections\n    ModelInput\n) ->\n\n    class Form\n        constructor: () ->\n            @all = {};\n\n        set: (name, initVal) ->\n            @all[name] = new ModelInput name, initVal\n\n            @\n",null,"angular\n.module('Collection:Tasks', [\n # Dependencies\n    'Util'\n    'Model:Task'\n])\n.factory 'CollectionTasks', (\n # Dependency Injections\n    Util\n    ModelTask\n) ->\n\n    class CollectionTasks\n        constructor: () ->\n            @all = []\n            @order = {};\n            @order.keys = [\n                'Name': 'NAME'\n                'Code': 'CODE'\n                'Description': 'DESC'\n                'Completion Date': 'CD'\n            ]\n            @order.by = 'CD'\n            @order.reverse = false\n            @order.set = (fieldName) ->\n                if fieldName is @by\n                    @reverse = !@reverse\n                else\n                    @reverse = false\n\n                @by = fieldName\n\n        get: (uid) ->\n            @all[uid]\n\n        set: (task) ->\n            if Util.typeIsArray task\n                tasksArray = task\n                for task in tasksArray\n\n                    @set task\n\n            else\n                @all.push( new ModelTask task )\n\n            return @\n\n        contains: (uid) ->\n            @all[uid] isnt undefined\n\n    CollectionTasks",null,"angular\n.module('Controller:TasksList', [\n    'Collection:Tasks'\n])\n.controller 'Controller:TasksList', (\n# Dependency Injections\n    $scope\n    $window\n    $http\n    CollectionTasks\n) ->\n    $scope.tasks = new CollectionTasks\n\n    $scope.tasks.set $window.tasks\n",null,"# Apply this directive to an <input> element.\n#    - The element will be \"focused\" when the given value is true (value === true)\n#    - When the element is blurred, the given value will be set to false\n#\n# Example:\n# When #address-wrapper is clicked, the browser's focus will shift to input#address\n\n# <div\n#     id=\"address-wrapper\"\n#     ng-init=\"focusInputAddress = false\"\n#     ng-click=\"focusInputAddress = true\"\n# >\n#   <label for=\"address\">Address:</label>\n#   <input\n#       id=\"address\"\n#       type=\"text\"\n#       ng-model=\"address\"\n#       focus-when=\"focusInputAddress\"\n#   />\n#   <div id=\"confirmAddressIcon\"></div>\n# </div>\n# //\n# - Walter Roman\n\nangular\n.module 'focusWhen', []\n.directive 'focusWhen', ($timeout, $parse) ->\n    {\n        link: (scope, element, attrs) ->\n            model = $parse attrs.focusWhen\n            scope.$watch model, (value) ->\n                if value is true\n                    # $timeout in place to give elements time to render\n                    $timeout () ->\n                        element[0].focus()\n\n            element.bind 'blur', ->\n                 scope.$apply model.assign scope, false\n    }",null,"angular\n.module('Model:Input', [\n # Dependencies\n])\n.factory 'ModelInput', (\n # Dependency Injections\n) ->\n    class Input\n        constructor: (name, initialValue) ->\n            @val = initialValue\n            @input = initialValue\n            @hasChanged = false\n            @focused = false\n\n        reset: ($event) ->\n            console.log 'reset'\n            @input = @val\n            @onChange()\n            if $event\n                $event.stopPropagation()\n\n        save: ($event) ->\n            console.log 'save'\n            @val = @input\n            @onChange()\n            if $event\n                $event.stopPropagation()\n\n        onFocus: ->\n            if !@hasChanged\n                @reset()\n\n        onClick: ($event) ->\n            @focused = true\n            if $event\n                $event.stopPropagation()\n\n        onChange: ->\n            @hasChanged = @val isnt @input\n\n        onKeypress: ($event) ->\n            if $event.keyCode is 27 # 27 = escape key\n                @reset($event)\n\n            if $event.keyCode is 13 # 13 = enter key\n                @save($event)",null,"angular\n.module('Model:Task', [\n # Dependencies\n    'Collection:Form'\n\n])\n.factory 'ModelTask', (\n # Dependency Injections\n    CollectionForm\n) ->\n    class Task\n        constructor: (task) ->\n            # Data\n            @NAME = task.NAME\n            @CODE = task.CODE\n            @DESC = task.DESC\n            @ID = task.ID\n            @CATEGORY = task.CATEGORY\n            @CD = parseInt task.CD\n\n            # UI\n            @isSelected = false\n\n            @display = {}\n            @display.CD = moment(@CD, 'x').format('YYYY-M-D')\n\n            @onClick = ($event) ->\n                if $event.keyCode\n                    return\n                @isSelected = !@isSelected\n\n            @form = new CollectionForm\n            @form\n                .set 'desc', @DESC\n                .set 'cd', @display.CD\n\n            generateRandomIncreasingInts = (num, start, mult) ->\n                ints = []\n                for i in [1..num] by 1\n                    start += Math.floor(Math.random() * mult)\n                    ints.push start\n\n                ints\n\n            @chart = {}\n            @chart.labels = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"]\n            @chart.series = ['Outstanding Category Tasks', 'Completed Category Tasks']\n            @chart.data = [\n                generateRandomIncreasingInts(@chart.labels.length, 100, -20),\n                generateRandomIncreasingInts(@chart.labels.length, 10, 30)\n            ]\n",null],"sourceRoot":"/source/"}