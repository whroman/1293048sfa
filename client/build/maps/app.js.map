{"version":3,"sources":["util.coffee","util.js","collections/tasks.coffee","collections/tasks.js","apps/list.coffee","apps/list.js","controllers/tasksList.coffee","controllers/tasksList.js","directives/focusWhen.coffee","directives/focusWhen.js"],"names":["angular","module","factory","$rootScope","$window","Util","mediaQuery","$el","element","document","getElementById","get","this","css","typeIsArray","Array","isArray","value","toString","call","CollectionTasks","Form","Input","Task","name","initialValue","val","input","hasChanged","focused","prototype","reset","$event","console","log","onChange","stopPropagation","save","onFocus","onClick","onKeypress","keyCode","all","set","initVal","task","NAME","CODE","DESC","ID","CATEGORY","CD","parseInt","isSelected","display","moment","format","form","order","keys","Name","Code","Description","Completion Date","by","reverse","fieldName","uid","i","len","tasksArray","length","push","contains","controller","$scope","$http","util","tasks","foo","bar","$on","event","productId","logScope","directive","$timeout","$parse","link","scope","attrs","model","focusWhen","$watch","focus","bind","$apply","assign"],"mappings":"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","file":"app.js","sourcesContent":["angular\n.module('Util', [\n# Dependencies\n])\n.factory 'Util', (\n# Dependency Injections\n    $rootScope\n    $window\n) ->\n    Util = {}\n    Util.mediaQuery = {}\n        # Cache jQuery selection, whose `z-index` value describes current media query state\n    Util.mediaQuery.$el = angular.element document.getElementById('media-query')\n        # Query current media query state\n    Util.mediaQuery.get = ->\n        this.$el.css 'z-index'\n\n    Util.typeIsArray = Array.isArray || ( value ) -> return {}.toString.call( value ) is '[object Array]'\n\n    Util",null,"angular\n.module('Collection:Tasks', [\n # Dependencies\n    'Util'\n])\n.factory 'CollectionTasks', (\n # Dependency Injections\n    $rootScope\n    Util\n) ->\n    class Input\n        constructor: (name, initialValue) ->\n            @val = initialValue\n            @input = initialValue\n            @hasChanged = false\n            @focused = false\n\n        reset: ($event) ->\n            console.log 'reset'\n            @input = @val\n            @onChange()\n            if $event\n                $event.stopPropagation()\n\n        save: ($event) ->\n            console.log 'save'\n            @val = @input\n            @onChange()\n            if $event\n                $event.stopPropagation()\n\n        onFocus: ->\n            if !@hasChanged\n                @reset()\n\n        onClick: ($event) ->\n            @focused = true\n            if $event\n                $event.stopPropagation()\n\n        onChange: ->\n            @hasChanged = @val isnt @input\n\n        onKeypress: ($event) ->\n            if $event.keyCode is 27 # 27 = escape key\n                @reset($event)\n\n            if $event.keyCode is 13 # 13 = enter key\n                @save($event)\n\n    class Form\n        constructor: () ->\n            @all = {};\n\n        set: (name, initVal) ->\n            @all[name] = new Input name, initVal\n\n            @\n\n    class Task\n        constructor: (task) ->\n            # Data\n            @NAME = task.NAME\n            @CODE = task.CODE\n            @DESC = task.DESC\n            @ID = task.ID\n            @CATEGORY = task.CATEGORY\n            @CD = parseInt task.CD\n\n            # UI\n            @isSelected = false\n\n            @display = {}\n            @display.CD = moment(@CD, 'x').format('YYYY-M-D')\n\n            @onClick = ($event) ->\n                if $event.keyCode\n                    return\n                @isSelected = !@isSelected\n\n            @form = new Form\n            @form\n                .set 'desc', @DESC\n                .set 'cd', @display.CD\n\n    class CollectionTasks\n        constructor: () ->\n            @all = []\n            @order = {};\n            @order.keys = [\n                'Name': 'NAME'\n                'Code': 'CODE'\n                'Description': 'DESC'\n                'Completion Date': 'CD'\n            ]\n            @order.by = 'CD'\n            @order.reverse = false\n            @order.set = (fieldName) ->\n                if fieldName is @by\n                    @reverse = !@reverse\n                else\n                    @reverse = false\n\n                @by = fieldName\n\n        get: (uid) ->\n            @all[uid]\n\n        set: (task) ->\n            if Util.typeIsArray task\n                tasksArray = task\n                for task in tasksArray\n\n                    @set task\n\n            else\n                @all.push( new Task task )\n\n            return @\n\n        contains: (uid) ->\n            @all[uid] isnt undefined\n\n\n\n    CollectionTasks",null,"angular.module 'App:List', [\n    'Controller:TasksList'\n    'Util'\n    'focusWhen'\n    'ngMaterial'\n]",null,"angular\n.module('Controller:TasksList', [\n    'Collection:Tasks'\n    'Util'\n])\n.controller 'Controller:TasksList', (\n# Dependency Injections\n    $scope\n    $window\n    $http\n    CollectionTasks\n    Util\n) ->\n    $scope.util = Util\n    $scope.tasks = new CollectionTasks\n\n    $scope.tasks.set $window.tasks\n\n    $scope.foo = {bar: true}\n\n    $scope.$on 'task:detail', (event, productId) ->\n        # $scope.modal.open productId\n\n    $window.logScope = ->\n        $window.$scope = $scope",null,"# Apply this directive to an <input> element.\n#    - The element will be \"focused\" when the given value is true (value === true)\n#    - When the element is blurred, the given value will be set to false\n#\n# Example:\n# When #address-wrapper is clicked, the browser's focus will shift to input#address\n\n# <div\n#     id=\"address-wrapper\"\n#     ng-init=\"focusInputAddress = false\"\n#     ng-click=\"focusInputAddress = true\"\n# >\n#   <label for=\"address\">Address:</label>\n#   <input\n#       id=\"address\"\n#       type=\"text\"\n#       ng-model=\"address\"\n#       focus-when=\"focusInputAddress\"\n#   />\n#   <div id=\"confirmAddressIcon\"></div>\n# </div>\n# //\n# - Walter Roman\n\nangular\n.module 'focusWhen', []\n.directive 'focusWhen', ($timeout, $parse) ->\n    {\n        link: (scope, element, attrs) ->\n            model = $parse attrs.focusWhen\n            scope.$watch model, (value) ->\n                if value is true\n                    # $timeout in place to give elements time to render\n                    $timeout () ->\n                        element[0].focus()\n\n            element.bind 'blur', ->\n                 scope.$apply model.assign scope, false\n    }",null],"sourceRoot":"/source/"}